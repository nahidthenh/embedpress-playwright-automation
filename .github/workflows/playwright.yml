name: Playwright Tests

on:
  push:
    branches: [main, master]
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 8:00 AM Bangladesh time (UTC+6)

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Set up environment variables
        run: |
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> .env
          echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
          echo "USERNAME=${{ secrets.USERNAME }}" >> .env
          mkdir -p playwright/.auth && touch playwright/.auth/user.json
          echo "{}" >> playwright/.auth/user.json

      - name: Run Playwright tests for Chromium
        env:
          SUBSCRIBER_USER: ${{ secrets.SUBSCRIBER_USER }}
          SUBSCRIBER_PASS: ${{ secrets.SUBSCRIBER_PASS }}
        run: npx playwright test --project=chromium
        continue-on-error: true

      - name: Parse test summary
        id: summary
        run: |
          PASSED=$(jq '[.suites[] | .. | objects | select(has("status")) | select(.status=="passed")] | length' result.json)
          FAILED=$(jq '[.suites[] | .. | objects | select(has("status")) | select(.status=="failed")] | length' result.json)
          SKIPPED=$(jq '[.suites[] | .. | objects | select(has("status")) | select(.status=="skipped")] | length' result.json)

          echo "PASSED=$PASSED" >> $GITHUB_ENV
          echo "FAILED=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV

      - name: Upload Playwright HTML report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Separate deployment job for GitHub Pages
  deploy:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: ./playwright-report

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./playwright-report

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Telegram Notification (commented out for now)
      # Uncomment the following steps when Telegram notifications are needed
      # - name: Send Telegram Notification
      #   if: always()
      #   env:
      #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      #   run: |
      #     # Get the deployment URL from the previous step
      #     REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
      #
      #     # Create status emoji based on test results
      #     if [ "$FAILED" -eq 0 ]; then
      #       STATUS_EMOJI="‚úÖ"
      #       STATUS_TEXT="All tests passed!"
      #     else
      #       STATUS_EMOJI="‚ùå"
      #       STATUS_TEXT="Some tests failed!"
      #     fi
      #
      #     # Format the message
      #     MESSAGE="üß™ *EmbedPress Playwright Test Results* $STATUS_EMOJI
      #
      #     $STATUS_TEXT
      #
      #     üìä *Test Summary:*
      #     ‚úÖ Passed: $PASSED
      #     ‚ùå Failed: $FAILED
      #     ‚è≠Ô∏è Skipped: $SKIPPED
      #
      #     üìÑ [View Detailed Report]($REPORT_URL)
      #     üïí Executed: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
      #     üåø Branch: ${{ github.ref_name }}
      #     üìù Commit: ${{ github.sha }}
      #     "
      #
      #     # Send the notification
      #     curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
      #       -d chat_id="${TELEGRAM_CHAT_ID}" \
      #       -d parse_mode="Markdown" \
      #       -d text="$MESSAGE" \
      #       -d disable_web_page_preview=false
